{
    "commits": {
        "before": {
            "committer_date": "2025-05-15 09:36:42",
            "id": "f7a5aa1d8d3",
            "message": "[torchgen] Refactor and simplify `gen_pyi.py` to use Generic TypeAlias (PEP 585) and Union Type (PEP 604) (#150727)"
        },
        "after": {
            "committer_date": "2025-05-15 09:36:42",
            "id": "22b124335e0",
            "message": "[BE] Update `.pyi` stub template to use Generic TypeAlias (PEP 585) and Union Type (PEP 604) (#150728)"
        }
    },
    "completenessScore": [0.366478, 0.36654],
    "filename": "full-run/pyright_compare.082820.f7a5aa1d8d3-22b124335e0.json",
    "diff": {
        "absolute": {
            "exportedSymbolCounts": {
                "withKnownType": 1,
                "withAmbiguousType": 2,
                "withUnknownType": -3
            },
            "otherSymbolCounts": {"withKnownType": -4, "withUnknownType": -2},
            "completenessScore": 6.214654154496069e-05
        },
        "percent": {
            "exportedSymbolCounts": {
                "withKnownType": 0.016957775139901644,
                "withAmbiguousType": 0.24390243902439024,
                "withUnknownType": -0.03200341369746106
            },
            "otherSymbolCounts": {
                "withKnownType": -0.2079002079002079,
                "withUnknownType": -0.11764705882352941
            },
            "completenessScore": 0.01695777513990101
        },
        "symbols": {
            "common": {
                "torch._C.CompilationUnit.get_functions": {
                    "diagnostics": {
                        "added": [
                            "Return type is partially unknown\n\u00a0\u00a0Return type is \"list[ScriptFunction[..., Unknown]]\"\n\u00a0\u00a0\u00a0\u00a0Type argument 1 for class \"list\" has partially unknown type"
                        ],
                        "removed": [
                            "Return type is partially unknown\n\u00a0\u00a0Return type is \"List[ScriptFunction[..., Unknown]]\"\n\u00a0\u00a0\u00a0\u00a0Type argument 1 for class \"list\" has partially unknown type"
                        ]
                    }
                },
                "torch._C.Graph.insert_point_guard": {
                    "diagnostics": {
                        "removed": [
                            "Return type is partially unknown\n\u00a0\u00a0Return type is \"_InsertPoint\""
                        ]
                    }
                },
                "torch._C._InsertPoint": {"isTypeKnown": true},
                "torch._C._InsertPoint.__exit__": {
                    "isTypeKnown": true,
                    "diagnostics": {
                        "removed": [
                            "Type annotation for parameter \"args\" is missing"
                        ]
                    }
                },
                "torch._C._XpuStreamBase.priority_range": {
                    "diagnostics": {
                        "added": [
                            "Return type is partially unknown\n\u00a0\u00a0Return type is \"tuple[Unknown, ...]\"\n\u00a0\u00a0\u00a0\u00a0Type argument 1 for class \"tuple\" has unknown type"
                        ],
                        "removed": [
                            "Return type is partially unknown\n\u00a0\u00a0Return type is \"Tuple[Unknown, ...]\"\n\u00a0\u00a0\u00a0\u00a0Type argument 1 for class \"tuple\" has unknown type"
                        ]
                    }
                },
                "torch._tensor.Tensor.__torch_dispatch__": {
                    "diagnostics": {
                        "added": [
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"(func: (...) -> Unknown, types: Iterable[type], args: tuple[Unknown, ...], kwargs: dict[Unknown, Unknown]) -> Any\"",
                            "Type of parameter \"args\" is partially unknown\n\u00a0\u00a0Parameter type is \"tuple[Unknown, ...]\"\n\u00a0\u00a0\u00a0\u00a0Type argument 1 for class \"tuple\" has unknown type",
                            "Type of parameter \"kwargs\" is partially unknown\n\u00a0\u00a0Parameter type is \"dict[Unknown, Unknown]\"\n\u00a0\u00a0\u00a0\u00a0Type argument 1 for class \"dict\" has unknown type\n\u00a0\u00a0\u00a0\u00a0Type argument 2 for class \"dict\" has unknown type"
                        ],
                        "removed": [
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"(func: (...) -> Unknown, types: Iterable[Type[Unknown]], args: Tuple[Unknown, ...], kwargs: Dict[Unknown, Unknown]) -> Any\"",
                            "Type of parameter \"args\" is partially unknown\n\u00a0\u00a0Parameter type is \"Tuple[Unknown, ...]\"\n\u00a0\u00a0\u00a0\u00a0Type argument 1 for class \"tuple\" has unknown type",
                            "Type of parameter \"kwargs\" is partially unknown\n\u00a0\u00a0Parameter type is \"Dict[Unknown, Unknown]\"\n\u00a0\u00a0\u00a0\u00a0Type argument 1 for class \"dict\" has unknown type\n\u00a0\u00a0\u00a0\u00a0Type argument 2 for class \"dict\" has unknown type",
                            "Type of parameter \"types\" is partially unknown\n\u00a0\u00a0Parameter type is \"Iterable[Type[Unknown]]\"\n\u00a0\u00a0\u00a0\u00a0Type argument 1 for class \"Iterable\" has partially unknown type"
                        ]
                    }
                },
                "torch.cuda.graphs.graph.capture_stream": {
                    "diagnostics": {
                        "added": [
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"Unknown | Stream\""
                        ],
                        "removed": [
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"Unknown | Stream | None\""
                        ]
                    }
                },
                "torch.fx.passes.tools_common.FxNetAccFusionsFinder.nodes": {
                    "isTypeAmbiguous": true,
                    "diagnostics": {
                        "added": [
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"list[Node]\""
                        ],
                        "removed": [
                            "Type argument 1 for class \"list\" has unknown type",
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"list[Unknown]\""
                        ]
                    }
                },
                "torch.onnx.producer_version": {
                    "diagnostics": {
                        "added": [
                            "Type unknown for variable \"torch.onnx.producer_version\""
                        ],
                        "removed": [
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"str\""
                        ]
                    }
                },
                "torch.return_types.all_return_types": {
                    "isTypeKnown": true,
                    "diagnostics": {
                        "removed": [
                            "Type argument 1 for class \"list\" has partially unknown type\n\u00a0\u00a0Type is [object Object]"
                        ]
                    }
                },
                "torch.utils.mkldnn.MkldnnConv2d.weight": {
                    "isTypeAmbiguous": true,
                    "diagnostics": {
                        "added": [
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"Any\""
                        ],
                        "removed": [
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"Tensor\""
                        ]
                    }
                },
                "torch.utils.mkldnn.MkldnnConv3d.weight": {
                    "isTypeAmbiguous": true,
                    "diagnostics": {
                        "added": [
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"Any\""
                        ],
                        "removed": [
                            "Type is missing type annotation and could be inferred differently by type checkers\n\u00a0\u00a0Inferred type is \"Tensor\""
                        ]
                    }
                }
            },
            "removed": [
                "torch._C.AliasDb.__str__",
                "torch._C.DispatchKeySet.__repr__",
                "torch._C.Event.__repr__",
                "torch._C.Stream.__repr__",
                "torch._C.Type.__eq__",
                "torch._C.Type.__hash__"
            ]
        }
    }
}
